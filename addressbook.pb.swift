/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: addressbook.proto
 *
 */

import Foundation
//import SwiftProtobuf


public struct Tutorial_Person: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tutorial_Person"}
  public var protoMessageName: String {return "Person"}
  public var protoPackageName: String {return "tutorial"}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "id": 2,
    "email": 3,
    "phone": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "id": 2,
    "email": 3,
    "phone": 4,
  ]}

  var unknown = ProtobufUnknownStorage()

  public enum PhoneType: ProtobufEnum {
    public typealias RawValue = Int
    case mobile // = 0
    case home // = 1
    case work // = 2

    public init() {
      self = .mobile
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mobile
      case 1: self = .home
      case 2: self = .work
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "mobile": self = .mobile
      case "home": self = .home
      case "work": self = .work
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "MOBILE": self = .mobile
      case "HOME": self = .home
      case "WORK": self = .work
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "MOBILE": self = .mobile
      case "HOME": self = .home
      case "WORK": self = .work
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .mobile: return 0
        case .home: return 1
        case .work: return 2
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .mobile: return "\"MOBILE\""
        case .home: return "\"HOME\""
        case .work: return "\"WORK\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .mobile: return ".mobile"
        case .home: return ".home"
        case .work: return ".work"
        }
      }
    }

  }

  public struct PhoneNumber: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Tutorial_Person.PhoneNumber"}
    public var protoMessageName: String {return "PhoneNumber"}
    public var protoPackageName: String {return "tutorial"}
    public var jsonFieldNames: [String: Int] {return [
      "number": 1,
      "type": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "number": 1,
      "type": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var number: String = ""

    private var _type: Tutorial_Person.PhoneType? = nil
    public var type: Tutorial_Person.PhoneType? {
      get {return _type ?? Tutorial_Person.PhoneType.home}
      set {_type = newValue}
    }

    public init() {}

    public init(number: String = "",
      type: Tutorial_Person.PhoneType? = nil)
    {
      self.number = number
      self.type = type
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &number)
      case 2: handled = try setter.decodeOptionalField(fieldType: Tutorial_Person.PhoneType.self, value: &type)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: number, protoFieldNumber: 1, protoFieldName: "number", jsonFieldName: "number", swiftFieldName: "number")
      if let v = type {
        try visitor.visitSingularField(fieldType: Tutorial_Person.PhoneType.self, value: v, protoFieldNumber: 2, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Tutorial_Person.PhoneNumber) -> Bool {
      if number != other.number {return false}
      if (((type != nil && type! != Tutorial_Person.PhoneType.home) || (other.type != nil && other.type! != Tutorial_Person.PhoneType.home)) && (type == nil || other.type == nil || type! != other.type!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var name: String = ""

  public var id: Int32 = 0

  public var email: String? = nil

  public var phone: [Tutorial_Person.PhoneNumber] = []

  public init() {}

  public init(name: String = "",
    id: Int32 = 0,
    email: String? = nil,
    phone: [Tutorial_Person.PhoneNumber] = [])
  {
    self.name = name
    self.id = id
    self.email = email
    if !phone.isEmpty {
      self.phone = phone
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRequiredField(fieldType: ProtobufString.self, value: &name)
    case 2: handled = try setter.decodeRequiredField(fieldType: ProtobufInt32.self, value: &id)
    case 3: handled = try setter.decodeOptionalField(fieldType: ProtobufString.self, value: &email)
    case 4: handled = try setter.decodeRepeatedMessageField(fieldType: Tutorial_Person.PhoneNumber.self, value: &phone)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: id, protoFieldNumber: 2, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    if let v = email {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "email", jsonFieldName: "email", swiftFieldName: "email")
    }
    if !phone.isEmpty {
      try visitor.visitRepeatedMessageField(value: phone, protoFieldNumber: 4, protoFieldName: "phone", jsonFieldName: "phone", swiftFieldName: "phone")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tutorial_Person) -> Bool {
    if name != other.name {return false}
    if id != other.id {return false}
    if ((email != nil || other.email != nil) && (email == nil || other.email == nil || email! != other.email!)) {return false}
    if phone != other.phone {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct Tutorial_AddressBook: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Tutorial_AddressBook"}
  public var protoMessageName: String {return "AddressBook"}
  public var protoPackageName: String {return "tutorial"}
  public var jsonFieldNames: [String: Int] {return [
    "person": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "person": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var person: [Tutorial_Person] = []

  public init() {}

  public init(person: [Tutorial_Person] = [])
  {
    if !person.isEmpty {
      self.person = person
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Tutorial_Person.self, value: &person)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !person.isEmpty {
      try visitor.visitRepeatedMessageField(value: person, protoFieldNumber: 1, protoFieldName: "person", jsonFieldName: "person", swiftFieldName: "person")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Tutorial_AddressBook) -> Bool {
    if person != other.person {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
